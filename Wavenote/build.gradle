apply plugin: 'com.android.application'
apply plugin: 'io.sentry.android.gradle'

android {
    buildToolsVersion '30.0.2'
    compileSdkVersion 32

    buildTypes {
        debug {
            applicationIdSuffix '.debug'
        }

        release {
            minifyEnabled true
            shrinkResources false
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            sentry {
                autoUpload true
                uploadNativeSymbols true
                includeNativeSources true
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId "com.theost.wavenote"
        // Allow versionName to be overridden with property. e.g. -PversionName=1234
        if (project.hasProperty("versionName")) {
            versionName project.property("versionName")
        } else {
            versionName "3.9"
        }
        versionCode 309
        minSdkVersion 21
        targetSdkVersion 32

        vectorDrawables.useSupportLibrary = true

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:deprecation" << "-Xlint:unchecked"
    }

    lintOptions {
        checkReleaseBuilds false
    }

    testOptions {
        unitTests.returnDefaultValues = true
        // Disable animations in order to enter text in the text inputs in the
        // Espresso tests
        animationsDisabled = true
    }

    aaptOptions {
        additionalParameters "--no-version-vectors"
    }
}

buildscript {
    dependencies {
        classpath 'io.sentry:sentry-android-gradle-plugin:1.7.36'
    }

    repositories {
        google()
        jcenter()
    }
}

configurations {
    cleanedAnnotations
    compile.exclude group: 'org.jetbrains', module: 'annotations'
}

dependencies {
    testImplementation 'junit:junit:4.13.1'
    testImplementation 'org.mockito:mockito-core:2.8.47'
    androidTestImplementation 'androidx.test:core:1.3.0'
    androidTestImplementation 'androidx.annotation:annotation:1.1.0'
    androidTestImplementation 'androidx.test:runner:1.3.0'
    androidTestImplementation 'androidx.test:rules:1.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.3.0'

    // Automattic and WordPress dependencies
    implementation 'com.simperium.android:simperium:0.10.0'
    implementation 'org.wordpress:passcodelock:2.0.2'
    implementation 'androidx.work:work-runtime:2.5.0'
    implementation 'androidx.concurrent:concurrent-futures:1.1.0'

    // Zip4j
    implementation group: 'net.lingala.zip4j', name: 'zip4j', version: '2.5.2'

    // Tag Soup
    implementation group: 'org.ccil.cowan.tagsoup', name: 'tagsoup', version: '1.2'

    // Photo and Cache
    implementation 'com.asksira.android:photoview:1.0.3'
    implementation 'com.facebook.fresco:fresco:2.3.0'
    implementation 'me.relex:photodraweeview:2.0.0'
    implementation 'com.ablanco.zoomy:zoomy:1.1.0'

    // Google Support
    implementation 'androidx.core:core:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.3.0-beta01'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'com.afollestad.material-dialogs:core:0.9.6.0'
    implementation 'com.afollestad.material-dialogs:commons:0.9.6.0'
    implementation 'androidx.vectordrawable:vectordrawable:1.1.0'
    implementation 'androidx.preference:preference:1.1.1'
    implementation 'androidx.legacy:legacy-preference-v14:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.0-alpha2'

    // Google Play Services
    implementation 'com.google.android.gms:play-services-wearable:17.0.0'

    // Third Party
    implementation 'io.sentry:sentry-android:4.0.0-alpha.1'
    implementation 'com.squareup.okhttp3:okhttp:3.12.1'
    implementation 'com.commonsware.cwac:anddown:0.4.0'
    implementation 'net.openid:appauth:0.7.0'
    wearApp project(':Wear')
}

repositories {
    jcenter()
    google()
    maven { url "https://jitpack.io" }
    maven { url "https://s3.amazonaws.com/repo.commonsware.com" }
}

if (["storeFile", "storePassword", "keyAlias", "keyPassword"].count { !project.hasProperty(it) } == 0) {
    android {
        signingConfigs {
            release {
                storeFile = rootProject.file(project.storeFile)
                storePassword = project.storePassword
                keyAlias = project.keyAlias
                keyPassword = project.keyPassword
            }
        }
    }
    android.buildTypes.release.signingConfig = android.signingConfigs.release
}

task copyGradlePropertiesIfMissing(group: "generate", description: "Copy Gradle Properties") {
    if (!file("${rootDir}/Wavenote/gradle.properties").exists()) {
        copy {
            from("${rootDir}/Wavenote")
            into("${rootDir}/Wavenote")
            include('gradle.properties-example')
            rename('gradle.properties-example', 'gradle.properties')
        }
    }
}

static def loadPropertiesFromFile(inputFile) {
    def properties = new Properties()
    inputFile.withInputStream { stream ->
        properties.load(stream)
    }
    return properties
}

static String toSnakeCase(String text) {
    text.replaceAll(/([A-Z])/, /_$1/).replaceAll(/^_/, '')
}

android.applicationVariants.all { variant ->
    variant.generateBuildConfigProvider.configure {
        dependsOn(copyGradlePropertiesIfMissing)
    }
    def inputFile = file("${rootDir}/Wavenote/gradle.properties")
    def properties = loadPropertiesFromFile(inputFile)
    properties.any { property ->
        def key = toSnakeCase(property.key).toUpperCase()
        if (key == "SIMPERIUM_APP_ID" ||
                key == "SIMPERIUM_APP_KEY") {
            buildConfigField "String", key, "\"${property.value}\""
        } else if (key == "SENTRY_DSN") {
            resValue "string", key, "\"${property.value}\""
        }
    }
    buildConfigField "String", "BUILD", "\"${gitDescribe()}\""
    buildConfigField "String", "BUILD_HASH", "\"${gitHash()}\""
}

if (project.hasProperty("debugStoreFile")) {
    def sharedDebugStore = file(project.debugStoreFile.replaceFirst("^~", System.getProperty("user.home")))
    if (sharedDebugStore.exists()) {
        android {
            signingConfigs {
                debug {
                    storeFile sharedDebugStore
                }
            }
        }
    }
}